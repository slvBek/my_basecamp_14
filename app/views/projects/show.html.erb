<div class="uz">
  <%= render @project %>

  <div>
    <%= link_to "Edit this project", edit_project_path(@project) %> |
    <%= link_to "Back to projects", projects_path %>

    <%= button_to "Destroy this project", @project, method: :delete %>
  </div>
</div>





<canvas class="orb-canvas"></canvas>
<div class="overlay">
  <div class="overlay__inner">
    <div class="overlay__btns">
      </button>
      <button class="overlay__btn overlay__btn--colors">
        <span class="overlay__btn-emoji">ðŸŽ¨</span>
      </button>
    </div>
  </div>
</div>


<script type="module">
  import * as PIXI from "https://cdn.skypack.dev/pixi.js";
  import { KawaseBlurFilter } from "https://cdn.skypack.dev/@pixi/filter-kawase-blur";
  import SimplexNoise from "https://cdn.skypack.dev/simplex-noise@3.0.0";
  import hsl from "https://cdn.skypack.dev/hsl-to-hex";
  import debounce from "https://cdn.skypack.dev/debounce";
  function random(min, max) {
    return Math.random() * (max - min) + min;
  }
  function map(n, start1, end1, start2, end2) {
    return ((n - start1) / (end1 - start1)) * (end2 - start2) + start2;
  }
  const simplex = new SimplexNoise();
  class ColorPalette {
    constructor() {
      this.setColors();
      this.setCustomProperties();
    }

    setColors() {
      this.hue = ~~random(220, 360);
      this.complimentaryHue1 = this.hue + 30;
      this.complimentaryHue2 = this.hue + 60;
      this.saturation = 95;
      this.lightness = 50;
      this.baseColor = hsl(this.hue, this.saturation, this.lightness);
      this.complimentaryColor1 = hsl(
      this.complimentaryHue1,
      this.saturation,
      this.lightness
      );
      this.complimentaryColor2 = hsl(
      this.complimentaryHue2,
      this.saturation,
      this.lightness
      );

      this.colorChoices = [
      this.baseColor,
      this.complimentaryColor1,
      this.complimentaryColor2
      ];
    }

    randomColor() {
      return this.colorChoices[~~random(0, this.colorChoices.length)].replace(
        "#",
        "0x"
      );
    }

    setCustomProperties() {
      document.documentElement.style.setProperty("--hue", this.hue);
      document.documentElement.style.setProperty(
        "--hue-complimentary1",
        this.complimentaryHue1
      );
      document.documentElement.style.setProperty(
        "--hue-complimentary2",
        this.complimentaryHue2
      );
    }
  }

  class Orb {
    constructor(fill = 0x000000) {
      this.bounds = this.setBounds();
      this.x = random(this.bounds["x"].min, this.bounds["x"].max);
      this.y = random(this.bounds["y"].min, this.bounds["y"].max);
      this.scale = 1;
      this.fill = fill;
      this.radius = random(window.innerHeight / 6, window.innerHeight / 3);
      this.xOff = random(0, 1000);
      this.yOff = random(0, 1000);
      this.inc = 0.002;
      this.graphics = new PIXI.Graphics();
      this.graphics.alpha = 0.825;
      window.addEventListener(
        "resize",
        debounce(() => {
          this.bounds = this.setBounds();
        }, 250)
      );
    }

    setBounds() {
      const maxDist =
        window.innerWidth < 1000 ? window.innerWidth / 3 : window.innerWidth / 5;
      const originX = window.innerWidth / 1.25;
      const originY =
        window.innerWidth < 1000
          ? window.innerHeight
          : window.innerHeight / 1.375;
      return {
        x: {
          min: originX - maxDist,
          max: originX + maxDist
        },
        y: {
          min: originY - maxDist,
          max: originY + maxDist
        }
      };
    }

    update() {
      const xNoise = simplex.noise2D(this.xOff, this.xOff);
      const yNoise = simplex.noise2D(this.yOff, this.yOff);
      const scaleNoise = simplex.noise2D(this.xOff, this.yOff);

      this.x = map(xNoise, -1, 1, this.bounds["x"].min, this.bounds["x"].max);
      this.y = map(yNoise, -1, 1, this.bounds["y"].min, this.bounds["y"].max);
      this.scale = map(scaleNoise, -1, 1, 0.5, 1);
      this.xOff += this.inc;
      this.yOff += this.inc;
    }

    render() {
      this.graphics.x = this.x;
      this.graphics.y = this.y;
      this.graphics.scale.set(this.scale);
      this.graphics.clear();
      this.graphics.beginFill(this.fill);
      this.graphics.drawCircle(0, 0, this.radius);
      this.graphics.endFill();
    }
  }

  const app = new PIXI.Application({
    view: document.querySelector(".orb-canvas"),
    resizeTo: window,
    transparent: true
  });

  const colorPalette = new ColorPalette();

  app.stage.filters = [new KawaseBlurFilter(30, 10, true)];

  const orbs = [];

  for (let i = 0; i < 10; i++) {
    const orb = new Orb(colorPalette.randomColor());

    app.stage.addChild(orb.graphics);

    orbs.push(orb);
  }

  if (!window.matchMedia("(prefers-reduced-motion: reduce)").matches) {
    app.ticker.add(() => {
      orbs.forEach((orb) => {
        orb.update();
        orb.render();
      });
    });
  } else {
    orbs.forEach((orb) => {
      orb.update();
      orb.render();
    });
  }

  document
    .querySelector(".overlay__btn--colors")
    .addEventListener("click", () => {
      colorPalette.setColors();
      colorPalette.setCustomProperties();

      orbs.forEach((orb) => {
        orb.fill = colorPalette.randomColor();
      });
    });


</script>



<style>

  .uz {
    position: absolute;
    z-index: 1;
  }

  :root {
    --dark-color: hsl(var(--hue), 100%, 9%);
    --light-color: hsl(var(--hue), 95%, 98%);
    --base: hsl(var(--hue), 95%, 50%);
    --complimentary1: hsl(var(--hue-complimentary1), 95%, 50%);
    --complimentary2: hsl(var(--hue-complimentary2), 95%, 50%);

    --font-family: "Poppins", system-ui;

    --bg-gradient: linear-gradient(
      to bottom,
      hsl(var(--hue), 95%, 99%),
      hsl(var(--hue), 95%, 84%)
    );
  }




  body {
    
    min-height: 100vh;
    display: grid;
    place-items: center;
    padding: 2rem;
    font-family: var(--font-family);
    color: var(--dark-color);
    background: var(--bg-gradient);
  }

  .orb-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: -1;
  }

  .overlay {
    position: absolute;
    z-index: auto;
    width: 35%;
    max-width: 1140px;
    max-height: 640px;
    padding: 10rem 2rem;
    display: flex;
    align-items: center;
    background: rgba(255, 255, 255, 0.375);
    box-shadow: 0 0.75rem 2rem 0 rgba(0, 0, 0, 0.1);
    border-radius: 2rem;
    border: 1px solid rgba(255, 255, 255, 0.125);
  }

  .overlay__inner {
    max-width: 36rem;
  }


  .overlay__btns {
    width: 100%;
    max-width: 30rem;
    display: flex;
  }

  .overlay__btn {
    height: 1px;
    width: 1px;
    bottom: 155px;
    left: 530px;
    display: flex;
    justify-content: center;
    align-items: center;
    
    font-weight: 600;
    color: var(--light-color);
    background: var(--dark-color);
    border: none;
    border-radius: 100rem;
    transition: transform 150ms ease;
    outline-color: hsl(var(--hue), 95%, 50%);
  }

  .overlay__btn:hover {
    transform: scale(1.05);
    cursor: pointer;
  }

  .overlay__btn--transparent {
    background: transparent;
    color: var(--dark-color);
    border: 2px solid var(--dark-color);
    border-width: 2px;
    margin-right: 0.75rem;
  }

  .overlay__btn-emoji {
    margin-left: 0.375rem;
  }

  @media (prefers-contrast: high) {
    .orb-canvas {
      display: none;
    }
  }

  @media only screen and (max-width: 1140px) {
    .overlay {
      padding: 8rem 4rem;
    }
  }

  @media only screen and (max-width: 840px) {
    body {
      padding: 1.5rem;
    }

    .overlay {
      padding: 4rem;
      height: auto;
    }

    .overlay__title {
      font-size: 1.25rem;
      line-height: 2rem;
      margin-bottom: 1.5rem;
    }

    .overlay__description {
      font-size: 0.875rem;
      line-height: 1.5rem;
      margin-bottom: 2.5rem;
    }
  }

  @media only screen and (max-width: 600px) {
    .overlay {
      padding: 1.5rem;
    }

    .overlay__btns {
      flex-wrap: wrap;
    }

    .overlay__btn {
      width: 100%;
      font-size: 0.75rem;
      margin-right: 0;
    }

    .overlay__btn:first-child {
      margin-bottom: 1rem;
    }
  }

  }


</style>
